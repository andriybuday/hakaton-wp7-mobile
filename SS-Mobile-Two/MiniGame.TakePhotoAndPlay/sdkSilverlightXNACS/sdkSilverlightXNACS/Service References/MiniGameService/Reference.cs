//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace sdkSilverlightXNACS.MiniGameService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MiniGameService.IMiniGameService")]
    public interface IMiniGameService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMiniGameService/GetState", ReplyAction="http://tempuri.org/IMiniGameService/GetStateResponse")]
        System.IAsyncResult BeginGetState(string currrentPosition, System.AsyncCallback callback, object asyncState);
        
        string EndGetState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMiniGameService/Start", ReplyAction="http://tempuri.org/IMiniGameService/StartResponse")]
        System.IAsyncResult BeginStart(string player, System.AsyncCallback callback, object asyncState);
        
        bool EndStart(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMiniGameServiceChannel : sdkSilverlightXNACS.MiniGameService.IMiniGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MiniGameServiceClient : System.ServiceModel.ClientBase<sdkSilverlightXNACS.MiniGameService.IMiniGameService>, sdkSilverlightXNACS.MiniGameService.IMiniGameService {
        
        private BeginOperationDelegate onBeginGetStateDelegate;
        
        private EndOperationDelegate onEndGetStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartDelegate;
        
        private EndOperationDelegate onEndStartDelegate;
        
        private System.Threading.SendOrPostCallback onStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MiniGameServiceClient() {
        }
        
        public MiniGameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MiniGameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MiniGameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MiniGameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetStateCompletedEventArgs> GetStateCompleted;
        
        public event System.EventHandler<StartCompletedEventArgs> StartCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult sdkSilverlightXNACS.MiniGameService.IMiniGameService.BeginGetState(string currrentPosition, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetState(currrentPosition, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string sdkSilverlightXNACS.MiniGameService.IMiniGameService.EndGetState(System.IAsyncResult result) {
            return base.Channel.EndGetState(result);
        }
        
        private System.IAsyncResult OnBeginGetState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currrentPosition = ((string)(inValues[0]));
            return ((sdkSilverlightXNACS.MiniGameService.IMiniGameService)(this)).BeginGetState(currrentPosition, callback, asyncState);
        }
        
        private object[] OnEndGetState(System.IAsyncResult result) {
            string retVal = ((sdkSilverlightXNACS.MiniGameService.IMiniGameService)(this)).EndGetState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStateCompleted(object state) {
            if ((this.GetStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStateCompleted(this, new GetStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStateAsync(string currrentPosition) {
            this.GetStateAsync(currrentPosition, null);
        }
        
        public void GetStateAsync(string currrentPosition, object userState) {
            if ((this.onBeginGetStateDelegate == null)) {
                this.onBeginGetStateDelegate = new BeginOperationDelegate(this.OnBeginGetState);
            }
            if ((this.onEndGetStateDelegate == null)) {
                this.onEndGetStateDelegate = new EndOperationDelegate(this.OnEndGetState);
            }
            if ((this.onGetStateCompletedDelegate == null)) {
                this.onGetStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetStateDelegate, new object[] {
                        currrentPosition}, this.onEndGetStateDelegate, this.onGetStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult sdkSilverlightXNACS.MiniGameService.IMiniGameService.BeginStart(string player, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStart(player, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool sdkSilverlightXNACS.MiniGameService.IMiniGameService.EndStart(System.IAsyncResult result) {
            return base.Channel.EndStart(result);
        }
        
        private System.IAsyncResult OnBeginStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string player = ((string)(inValues[0]));
            return ((sdkSilverlightXNACS.MiniGameService.IMiniGameService)(this)).BeginStart(player, callback, asyncState);
        }
        
        private object[] OnEndStart(System.IAsyncResult result) {
            bool retVal = ((sdkSilverlightXNACS.MiniGameService.IMiniGameService)(this)).EndStart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartCompleted(object state) {
            if ((this.StartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartCompleted(this, new StartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartAsync(string player) {
            this.StartAsync(player, null);
        }
        
        public void StartAsync(string player, object userState) {
            if ((this.onBeginStartDelegate == null)) {
                this.onBeginStartDelegate = new BeginOperationDelegate(this.OnBeginStart);
            }
            if ((this.onEndStartDelegate == null)) {
                this.onEndStartDelegate = new EndOperationDelegate(this.OnEndStart);
            }
            if ((this.onStartCompletedDelegate == null)) {
                this.onStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartCompleted);
            }
            base.InvokeAsync(this.onBeginStartDelegate, new object[] {
                        player}, this.onEndStartDelegate, this.onStartCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override sdkSilverlightXNACS.MiniGameService.IMiniGameService CreateChannel() {
            return new MiniGameServiceClientChannel(this);
        }
        
        private class MiniGameServiceClientChannel : ChannelBase<sdkSilverlightXNACS.MiniGameService.IMiniGameService>, sdkSilverlightXNACS.MiniGameService.IMiniGameService {
            
            public MiniGameServiceClientChannel(System.ServiceModel.ClientBase<sdkSilverlightXNACS.MiniGameService.IMiniGameService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetState(string currrentPosition, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = currrentPosition;
                System.IAsyncResult _result = base.BeginInvoke("GetState", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetState(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStart(string player, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = player;
                System.IAsyncResult _result = base.BeginInvoke("Start", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndStart(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Start", _args, result)));
                return _result;
            }
        }
    }
}
